/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IEventEmitter,
  IEventEmitterInterface,
} from "../../../contracts/event/IEventEmitter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "adder",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "emitAdd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "borrowAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "baseCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseDebtScaled",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeDebtScaled",
            type: "uint256",
          },
        ],
        internalType: "struct Event.Liquidation",
        name: "liquidation",
        type: "tuple",
      },
    ],
    name: "emitBorrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "scaledUnclaimedFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unclaimedFee",
        type: "uint256",
      },
    ],
    name: "emitClaimFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingAssetUsd",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountUsdStartClose",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountUsdAfterRepayAndSellCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountUsdAfterBuyCollateralAndRepay",
        type: "uint256",
      },
    ],
    name: "emitClose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseDebtScaled",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "memeCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "memeDebtScaled",
        type: "uint256",
      },
    ],
    name: "emitDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "marginLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "marginLevelLiquidationThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalCollateralUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalDebtUsd",
        type: "uint256",
      },
    ],
    name: "emitLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingAsset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidityRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowIndex",
        type: "uint256",
      },
    ],
    name: "emitPoolUpdated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "remover",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "emitRemove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "repayer",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "positionId",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "tokenIndex",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "repayAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "baseCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseDebtScaled",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeDebtScaled",
            type: "uint256",
          },
        ],
        internalType: "struct Event.Liquidation",
        name: "liquidation",
        type: "tuple",
      },
    ],
    name: "emitRepay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "baseCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseDebtScaled",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "memeDebtScaled",
            type: "uint256",
          },
        ],
        internalType: "struct Event.Liquidation",
        name: "liquidation",
        type: "tuple",
      },
    ],
    name: "emitSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "baseCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseDebtScaled",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "memeCollateral",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "memeDebtScaled",
        type: "uint256",
      },
    ],
    name: "emitWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEventEmitter__factory {
  static readonly abi = _abi;
  static createInterface(): IEventEmitterInterface {
    return new Interface(_abi) as IEventEmitterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IEventEmitter {
    return new Contract(address, _abi, runner) as unknown as IEventEmitter;
  }
}
