/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Errors, ErrorsInterface } from "../../../contracts/error/Errors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "accountInPosition",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AccountNotMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance1",
        type: "uint256",
      },
    ],
    name: "Balance1Insufficient",
    type: "error",
  },
  {
    inputs: [],
    name: "ClosePercentageExceeding",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "debtAmount",
        type: "uint256",
      },
    ],
    name: "CollateralCanNotCoverDebt",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "compactedValues",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "slotIndex",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "label",
        type: "string",
      },
    ],
    name: "CompactedArrayOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CouldNotSendNativeToken",
    type: "error",
  },
  {
    inputs: [],
    name: "DebtTokenOperationNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyAddAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyBase",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyBorrowAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyBurnAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCollateral",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyConfiguration",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDepositAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyHoldingAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyInterestRateStrategy",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyMintAmounts",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "EmptyPool",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyPoolKeys",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "EmptyPositions",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyReceiver",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyRemoveAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyRepayAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySwapInAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySwapOutAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyTokenBase",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "EmptyTokenTranferGasLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyTreasury",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "EmptyUnclaimedFee",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyWithdrawAmounts",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "step",
        type: "uint256",
      },
    ],
    name: "ErrorStep",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableLiquidity",
        type: "uint256",
      },
    ],
    name: "InsufficientAvailableLiquidity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToRemove",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientCollateralAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repayAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
    ],
    name: "InsufficientCollateralAmountForRepay",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReserve",
        type: "uint256",
      },
    ],
    name: "InsufficientReverveForBorrow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToWithdraw",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReserve",
        type: "uint256",
      },
    ],
    name: "InsufficientReverveForWithdraw",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastVirtualLiquidity0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastVirtualLiquidity1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "adjustedVirtualLiquidity0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "adjustedVirtualLiquidity1",
        type: "uint256",
      },
    ],
    name: "InsufficientSwapAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    name: "InsufficientSwapCollateral",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "InsufficientUserBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "borrowCapacity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "MaxValidBorrowCapacity",
        type: "uint256",
      },
    ],
    name: "InvalidBorrowCapacity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "MaxValidDecimals",
        type: "uint256",
      },
    ],
    name: "InvalidDecimals",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feeFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "MaxValidFeeFactor",
        type: "uint256",
      },
    ],
    name: "InvalidFeeFactor",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "InvalidNativeTokenSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "optimalUsageRatio",
        type: "uint256",
      },
    ],
    name: "InvalidOptimalUsageRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolKeyId",
        type: "uint256",
      },
    ],
    name: "InvalidPoolIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "supplyCapacity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "MaxValidSupplyCapacity",
        type: "uint256",
      },
    ],
    name: "InvalidSupplyCapacity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marginLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "marginLevelThreshold",
        type: "uint256",
      },
    ],
    name: "MarginAboveThreshold",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "marginLevel",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "marginLevelThreshold",
        type: "uint256",
      },
    ],
    name: "MarginBelowThreshold",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxDepositAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountToDeposit",
        type: "uint256",
      },
    ],
    name: "MaxDepositExceeds",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPositionId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "poolBank",
        type: "address",
      },
    ],
    name: "PoolAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "PositionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1OutMax",
        type: "uint256",
      },
    ],
    name: "RequestedAmount1ExceedsPriceLimit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount0OutMax",
        type: "uint256",
      },
    ],
    name: "RequestedAmountOExceedsPriceLimit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReserve0",
        type: "uint256",
      },
    ],
    name: "Reserve0Insufficient",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReserve1",
        type: "uint256",
      },
    ],
    name: "Reserve1Insufficient",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "SelfTransferNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "SingleTokenInOutSwapOnly",
    type: "error",
  },
  {
    inputs: [],
    name: "ThereMustBeAtLeastOneRoleAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "ThereMustBeAtLeastOneTimelockMultiSig",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenIndexNotSupport",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferError",
    type: "error",
  },
  {
    inputs: [],
    name: "TokensNotMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "usdCollateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdCollateralAmountNeeded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "debtAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "underlyingAsset",
        type: "address",
      },
    ],
    name: "UsdCollateralCanNotCoverDebt",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
    ],
    name: "UserDoNotHaveDebtInPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "basePriceReserve",
        type: "uint256",
      },
    ],
    name: "liquidityDidNotReachShortThreshord",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202792a9ca166b1d19f85258a4dac9243675816d6e5074d71607456e5ccf7ba2fa64736f6c634300081c0033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
