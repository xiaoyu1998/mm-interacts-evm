/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PoolInterestRateStrategy,
  PoolInterestRateStrategyInterface,
} from "../../../contracts/interest/PoolInterestRateStrategy";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optimalUsageRatio",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rate0",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "rateSlope1",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "rateSlope2",
            type: "uint256[]",
          },
        ],
        internalType:
          "struct PoolInterestRateStrategy.InterestRateStrategyParams",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "optimalUsageRatio",
        type: "uint256",
      },
    ],
    name: "InvalidOptimalUsageRate",
    type: "error",
  },
  {
    inputs: [],
    name: "BALANCE10000",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BALANCE1000000",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BALANCE50000",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BALANCE500000",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_EXCESS_USAGE_RATIO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OPTIMAL_USAGE_RATIO",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SLOPESIZE",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalPoolBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPoolBalanceBase",
            type: "uint256",
          },
        ],
        internalType: "struct InterestUtils.CalculateInterestRatesParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "calculateInterestRates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOptimalUsageRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRateSlope1",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRateSlope2",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRatebase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "getSlopeIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516116ac3803806116ac833981810160405281019061003291906103c9565b80600001516b033b2e3c9fd0803ce8000000101561008b5780600001516040517fb90df3f20000000000000000000000000000000000000000000000000000000081526004016100829190610421565b60405180910390fd5b80600001516080818152505080600001516b033b2e3c9fd0803ce80000006100b3919061046b565b60a08181525050806020015160c081815250508060400151600090805190602001906100e0929190610102565b508060600151600190805190602001906100fb929190610102565b505061049f565b82805482825590600052602060002090810192821561013e579160200282015b8281111561013d578251825591602001919060010190610122565b5b50905061014b919061014f565b5090565b5b80821115610168576000816000905550600101610150565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101ce82610185565b810181811067ffffffffffffffff821117156101ed576101ec610196565b5b80604052505050565b600061020061016c565b905061020c82826101c5565b919050565b600080fd5b6000819050919050565b61022981610216565b811461023457600080fd5b50565b60008151905061024681610220565b92915050565b600080fd5b600067ffffffffffffffff82111561026c5761026b610196565b5b602082029050602081019050919050565b600080fd5b600061029561029084610251565b6101f6565b905080838252602082019050602084028301858111156102b8576102b761027d565b5b835b818110156102e157806102cd8882610237565b8452602084019350506020810190506102ba565b5050509392505050565b600082601f830112610300576102ff61024c565b5b8151610310848260208601610282565b91505092915050565b60006080828403121561032f5761032e610180565b5b61033960806101f6565b9050600061034984828501610237565b600083015250602061035d84828501610237565b602083015250604082015167ffffffffffffffff81111561038157610380610211565b5b61038d848285016102eb565b604083015250606082015167ffffffffffffffff8111156103b1576103b0610211565b5b6103bd848285016102eb565b60608301525092915050565b6000602082840312156103df576103de610176565b5b600082015167ffffffffffffffff8111156103fd576103fc61017b565b5b61040984828501610319565b91505092915050565b61041b81610216565b82525050565b60006020820190506104366000830184610412565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061047682610216565b915061048183610216565b92508282039050818111156104995761049861043c565b5b92915050565b60805160a05160c0516111a66105066000396000818161042901528181610525015261072101526000818161049401526108de0152600081816102d80152818161046e015281816106c2015281816108af015281816108ff01526109de01526111a66000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a3a9bc331161008c578063b1b0648511610066578063b1b06485146101f4578063d41a41ba14610212578063ed719cf814610230578063fdd63ecf1461024e576100cf565b8063a3a9bc331461019a578063a8602e86146101b8578063a9c622f8146101d6576100cf565b80632dd9037b146100d457806354c365c6146100f257806375005bb0146101105780637aa786151461012e5780638567992a1461014c57806387f0409d1461017c575b600080fd5b6100dc61027e565b6040516100e99190610d68565b60405180910390f35b6100fa6102d6565b6040516101079190610d99565b60405180910390f35b6101186102fa565b6040516101259190610d68565b60405180910390f35b610136610352565b6040516101439190610d99565b60405180910390f35b61016660048036038101906101619190610def565b61036f565b6040516101739190610e38565b60405180910390f35b610184610425565b6040516101919190610d99565b60405180910390f35b6101a261044d565b6040516101af9190610d99565b60405180910390f35b6101c061046a565b6040516101cd9190610d99565b60405180910390f35b6101de610492565b6040516101eb9190610d99565b60405180910390f35b6101fc6104b6565b6040516102099190610e38565b60405180910390f35b61021a6104bb565b6040516102279190610d99565b60405180910390f35b6102386104d9565b6040516102459190610d99565b60405180910390f35b61026860048036038101906102639190610f48565b6104f7565b6040516102759190610d99565b60405180910390f35b606060008054806020026020016040519081016040528092919081815260200182805480156102cc57602002820191906000526020600020905b8154815260200190600101908083116102b8575b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600180548060200260200160405190810160405280929190818152602001828054801561034857602002820191906000526020600020905b815481526020019060010190808311610334575b5050505050905090565b6b033b2e3c9fd0803ce800000061271061036c9190610fa4565b81565b60006b033b2e3c9fd0803ce800000061271061038b9190610fa4565b82101561039b5760009050610420565b6b033b2e3c9fd0803ce800000061c3506103b59190610fa4565b8210156103c55760019050610420565b6b033b2e3c9fd0803ce80000006207a1206103e09190610fa4565b8210156103f05760029050610420565b6b033b2e3c9fd0803ce8000000620f424061040b9190610fa4565b82101561041b5760039050610420565b600490505b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6b033b2e3c9fd0803ce800000061c3506104679190610fa4565b81565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600681565b6b033b2e3c9fd0803ce8000000620f42406104d69190610fa4565b81565b6b033b2e3c9fd0803ce80000006207a1206104f49190610fa4565b81565b60008082602001510361050d5760009050610a83565b610515610c4a565b82602001518160200181815250507f000000000000000000000000000000000000000000000000000000000000000081604001818152505061055a836040015161036f565b60ff168160e001818152505060008160e001518154811061057e5761057d610fe6565b5b90600052602060002001548160a001818152505060018160e00151815481106105aa576105a9610fe6565b5b90600052602060002001548160c00181815250506106016040518060400160405280601081526020017f746f74616c506f6f6c42616c616e6365000000000000000000000000000000008152508460000151610a88565b6106446040518060400160405280600981526020017f746f74616c4465627400000000000000000000000000000000000000000000008152508460200151610a88565b6106876040518060400160405280601481526020017f746f74616c506f6f6c42616c616e6365426173650000000000000000000000008152508460400151610a88565b6106e66040518060400160405280601381526020017f4f5054494d414c5f55534147455f524154494f000000000000000000000000008152507f0000000000000000000000000000000000000000000000000000000000000000610a88565b6107456040518060400160405280600681526020017f5f726174653000000000000000000000000000000000000000000000000000008152507f0000000000000000000000000000000000000000000000000000000000000000610a88565b6107886040518060400160405280600581526020017f696e6465780000000000000000000000000000000000000000000000000000008152508260e00151610a88565b6107cb6040518060400160405280600a81526020017f72617465536c6f706531000000000000000000000000000000000000000000008152508260a00151610a88565b61080e6040518060400160405280600a81526020017f72617465536c6f706532000000000000000000000000000000000000000000008152508260c00151610a88565b60008160200151146108ad5782600001518160000181815250508060200151816000015161083c9190611015565b81608001818152505061086081608001518260200151610ad390919063ffffffff16565b8160600181815250506108ac6040518060400160405280601081526020017f626f72726f775573616765526174696f000000000000000000000000000000008152508260600151610a88565b5b7f0000000000000000000000000000000000000000000000000000000000000000816060015111156109d15761093b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836060015161092d9190611049565b610ad390919063ffffffff16565b816101000181815250506109896040518060400160405280601681526020017f657863657373426f72726f775573616765526174696f00000000000000000000815250826101000151610a88565b6109a58161010001518260c00151610b1a90919063ffffffff16565b8160a001516109b49190611015565b816040018181516109c59190611015565b91508181525050610a37565b610a1e8160600151610a107f00000000000000000000000000000000000000000000000000000000000000008460a00151610ad390919063ffffffff16565b610b1a90919063ffffffff16565b81604001818151610a2f9190611015565b915081815250505b610a7a6040518060400160405280601181526020017f63757272656e74426f72726f77526174650000000000000000000000000000008152508260400151610a88565b80604001519150505b919050565b6000610acf57610ace6040518060400160405280600681526020017f2573202d257300000000000000000000000000000000000000000000000000008152508383610b65565b5b5050565b60006b033b2e3c9fd0803ce80000006002830460001903048311151582151715610afc57600080fd5b81600283046b033b2e3c9fd0803ce800000085020104905092915050565b6000816b019d971e4fe8401e740000006000190304831115821517610b3e57600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b610bff838383604051602401610b7d939291906110fc565b6040516020818303038152906040527f5821efa1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c04565b505050565b610c1b81610c13610c1e610c3f565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610c96819050919050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610c9e611141565b565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610cdf81610ccc565b82525050565b6000610cf18383610cd6565b60208301905092915050565b6000602082019050919050565b6000610d1582610ca0565b610d1f8185610cab565b9350610d2a83610cbc565b8060005b83811015610d5b578151610d428882610ce5565b9750610d4d83610cfd565b925050600181019050610d2e565b5085935050505092915050565b60006020820190508181036000830152610d828184610d0a565b905092915050565b610d9381610ccc565b82525050565b6000602082019050610dae6000830184610d8a565b92915050565b6000604051905090565b600080fd5b610dcc81610ccc565b8114610dd757600080fd5b50565b600081359050610de981610dc3565b92915050565b600060208284031215610e0557610e04610dbe565b5b6000610e1384828501610dda565b91505092915050565b600060ff82169050919050565b610e3281610e1c565b82525050565b6000602082019050610e4d6000830184610e29565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ea182610e58565b810181811067ffffffffffffffff82111715610ec057610ebf610e69565b5b80604052505050565b6000610ed3610db4565b9050610edf8282610e98565b919050565b600060608284031215610efa57610ef9610e53565b5b610f046060610ec9565b90506000610f1484828501610dda565b6000830152506020610f2884828501610dda565b6020830152506040610f3c84828501610dda565b60408301525092915050565b600060608284031215610f5e57610f5d610dbe565b5b6000610f6c84828501610ee4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610faf82610ccc565b9150610fba83610ccc565b9250828202610fc881610ccc565b91508282048414831517610fdf57610fde610f75565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061102082610ccc565b915061102b83610ccc565b925082820190508082111561104357611042610f75565b5b92915050565b600061105482610ccc565b915061105f83610ccc565b925082820390508181111561107757611076610f75565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b757808201518184015260208101905061109c565b60008484015250505050565b60006110ce8261107d565b6110d88185611088565b93506110e8818560208601611099565b6110f181610e58565b840191505092915050565b6000606082019050818103600083015261111681866110c3565b9050818103602083015261112a81856110c3565b90506111396040830184610d8a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea26469706673582212207fea7bc23cfe0c8664ea178245ade7fe067cdcdb51cea17448fbcdc096c4bde564736f6c634300081c0033";

type PoolInterestRateStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolInterestRateStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PoolInterestRateStrategy__factory extends ContractFactory {
  constructor(...args: PoolInterestRateStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    params: PoolInterestRateStrategy.InterestRateStrategyParamsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(params, overrides || {});
  }
  override deploy(
    params: PoolInterestRateStrategy.InterestRateStrategyParamsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(params, overrides || {}) as Promise<
      PoolInterestRateStrategy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): PoolInterestRateStrategy__factory {
    return super.connect(runner) as PoolInterestRateStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolInterestRateStrategyInterface {
    return new Interface(_abi) as PoolInterestRateStrategyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PoolInterestRateStrategy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PoolInterestRateStrategy;
  }
}
