/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ExchangeRouter,
  ExchangeRouterInterface,
} from "../../../contracts/router/ExchangeRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Router",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
      {
        internalType: "contract ILiquidityHandler",
        name: "_liquidityHandler",
        type: "address",
      },
      {
        internalType: "contract ISwapHandler",
        name: "_swapHandler",
        type: "address",
      },
      {
        internalType: "contract IDepositHandler",
        name: "_depositHandler",
        type: "address",
      },
      {
        internalType: "contract IBorrowHandler",
        name: "_borrowHandler",
        type: "address",
      },
      {
        internalType: "contract IRepayHandler",
        name: "_repayHandler",
        type: "address",
      },
      {
        internalType: "contract IWithdrawHandler",
        name: "_withdrawHandler",
        type: "address",
      },
      {
        internalType: "contract ILiquidationHandler",
        name: "_liquidationHandler",
        type: "address",
      },
      {
        internalType: "contract ICloseHandler",
        name: "_closeHandler",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyReceiver",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "borrowHandler",
    outputs: [
      {
        internalType: "contract IBorrowHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closeHandler",
    outputs: [
      {
        internalType: "contract ICloseHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositHandler",
    outputs: [
      {
        internalType: "contract IDepositHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
        ],
        internalType: "struct LiquidityUtils.AddParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeAdd",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "tokenIndex",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
        ],
        internalType: "struct BorrowUtils.BorrowParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeBorrow",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
        ],
        internalType: "struct CloseUtils.CloseParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeClose",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "tokenIndex",
            type: "uint8",
          },
        ],
        internalType: "struct DepositUtils.DepositParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidationUtils.LiquidationParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeLiquidation",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
        ],
        internalType: "struct LiquidityUtils.RemoveParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeRemove",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "tokenIndex",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "repayAmount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "repayOption",
            type: "uint8",
          },
        ],
        internalType: "struct RepayUtils.RepayParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeRepay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount0In",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount1In",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount0Out",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount1Out",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
        ],
        internalType: "struct SwapUtils.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount0In",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount1In",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount0Out",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount1Out",
            type: "uint256",
          },
        ],
        internalType: "struct SwapUtils.SwapInPositionParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeSwapInPosition",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "tokenIndex",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "withdrawAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
        ],
        internalType: "struct WithdrawUtils.WithdrawParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidationHandler",
    outputs: [
      {
        internalType: "contract ILiquidationHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidityHandler",
    outputs: [
      {
        internalType: "contract ILiquidityHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "repayHandler",
    outputs: [
      {
        internalType: "contract IRepayHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapHandler",
    outputs: [
      {
        internalType: "contract ISwapHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawHandler",
    outputs: [
      {
        internalType: "contract IWithdrawHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type ExchangeRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeRouter__factory extends ContractFactory {
  constructor(...args: ExchangeRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _router: AddressLike,
    _roleStore: AddressLike,
    _dataStore: AddressLike,
    _liquidityHandler: AddressLike,
    _swapHandler: AddressLike,
    _depositHandler: AddressLike,
    _borrowHandler: AddressLike,
    _repayHandler: AddressLike,
    _withdrawHandler: AddressLike,
    _liquidationHandler: AddressLike,
    _closeHandler: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _router,
      _roleStore,
      _dataStore,
      _liquidityHandler,
      _swapHandler,
      _depositHandler,
      _borrowHandler,
      _repayHandler,
      _withdrawHandler,
      _liquidationHandler,
      _closeHandler,
      overrides || {}
    );
  }
  override deploy(
    _router: AddressLike,
    _roleStore: AddressLike,
    _dataStore: AddressLike,
    _liquidityHandler: AddressLike,
    _swapHandler: AddressLike,
    _depositHandler: AddressLike,
    _borrowHandler: AddressLike,
    _repayHandler: AddressLike,
    _withdrawHandler: AddressLike,
    _liquidationHandler: AddressLike,
    _closeHandler: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _router,
      _roleStore,
      _dataStore,
      _liquidityHandler,
      _swapHandler,
      _depositHandler,
      _borrowHandler,
      _repayHandler,
      _withdrawHandler,
      _liquidationHandler,
      _closeHandler,
      overrides || {}
    ) as Promise<
      ExchangeRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExchangeRouter__factory {
    return super.connect(runner) as ExchangeRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeRouterInterface {
    return new Interface(_abi) as ExchangeRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExchangeRouter {
    return new Contract(address, _abi, runner) as unknown as ExchangeRouter;
  }
}
