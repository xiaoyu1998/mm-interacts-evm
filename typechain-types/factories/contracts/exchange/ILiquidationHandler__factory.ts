/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILiquidationHandler,
  ILiquidationHandlerInterface,
} from "../../../contracts/exchange/ILiquidationHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidationUtils.LiquidationParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "executeLiquidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ILiquidationHandler__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidationHandlerInterface {
    return new Interface(_abi) as ILiquidationHandlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILiquidationHandler {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ILiquidationHandler;
  }
}
