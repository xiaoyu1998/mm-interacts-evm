/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Position {
  export type AssetStruct = {
    token: AddressLike;
    collateral: BigNumberish;
    debtScaled: BigNumberish;
    entryLongPrice: BigNumberish;
    entryShortPrice: BigNumberish;
    accumulatedLongAmount: BigNumberish;
    accumulatedShortAmount: BigNumberish;
    positionType: BigNumberish;
  };

  export type AssetStructOutput = [
    token: string,
    collateral: bigint,
    debtScaled: bigint,
    entryLongPrice: bigint,
    entryShortPrice: bigint,
    accumulatedLongAmount: bigint,
    accumulatedShortAmount: bigint,
    positionType: bigint
  ] & {
    token: string;
    collateral: bigint;
    debtScaled: bigint;
    entryLongPrice: bigint;
    entryShortPrice: bigint;
    accumulatedLongAmount: bigint;
    accumulatedShortAmount: bigint;
    positionType: bigint;
  };

  export type PropsStruct = {
    assets: [Position.AssetStruct, Position.AssetStruct];
    id: BigNumberish;
    account: AddressLike;
  };

  export type PropsStructOutput = [
    assets: [Position.AssetStructOutput, Position.AssetStructOutput],
    id: bigint,
    account: string
  ] & {
    assets: [Position.AssetStructOutput, Position.AssetStructOutput];
    id: bigint;
    account: string;
  };
}

export interface PositionUtilsInterface extends Interface {
  getFunction(nameOrSignature: "getAndValidate"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAndValidate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAndValidate",
    data: BytesLike
  ): Result;
}

export interface PositionUtils extends BaseContract {
  connect(runner?: ContractRunner | null): PositionUtils;
  waitForDeployment(): Promise<this>;

  interface: PositionUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAndValidate: TypedContractMethod<
    [account: AddressLike, dataStore: AddressLike, positionId: BigNumberish],
    [[Position.PropsStructOutput, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAndValidate"
  ): TypedContractMethod<
    [account: AddressLike, dataStore: AddressLike, positionId: BigNumberish],
    [[Position.PropsStructOutput, string]],
    "view"
  >;

  filters: {};
}
