/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Event {
  export type LiquidationStruct = {
    baseCollateral: BigNumberish;
    baseDebtScaled: BigNumberish;
    memeCollateral: BigNumberish;
    memeDebtScaled: BigNumberish;
  };

  export type LiquidationStructOutput = [
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ] & {
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  };
}

export interface IEventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emitAdd"
      | "emitBorrow"
      | "emitClaimFees"
      | "emitClose"
      | "emitDeposit"
      | "emitLiquidation"
      | "emitPoolUpdated"
      | "emitRemove"
      | "emitRepay"
      | "emitSwap"
      | "emitWithdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitAdd",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitBorrow",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimFees",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClose",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitLiquidation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPoolUpdated",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRemove",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRepay",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwap",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "emitAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPoolUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitRepay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;
}

export interface IEventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): IEventEmitter;
  waitForDeployment(): Promise<this>;

  interface: IEventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitAdd: TypedContractMethod<
    [
      adder: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      to: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitClaimFees: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitClose: TypedContractMethod<
    [
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      amountUsdStartClose: BigNumberish,
      amountUsdAfterRepayAndSellCollateral: BigNumberish,
      amountUsdAfterBuyCollateralAndRepay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitDeposit: TypedContractMethod<
    [
      depositor: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      depositAmount: BigNumberish,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitLiquidation: TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitPoolUpdated: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitRemove: TypedContractMethod<
    [
      remover: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      liquidity: BigNumberish,
      to: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitRepay: TypedContractMethod<
    [
      repayer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      repayAmount: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitSwap: TypedContractMethod<
    [
      account: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitWithdraw: TypedContractMethod<
    [
      withdrawer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      withdrawAmount: BigNumberish,
      to: AddressLike,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitAdd"
  ): TypedContractMethod<
    [
      adder: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      to: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClaimFees"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClose"
  ): TypedContractMethod<
    [
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      amountUsdStartClose: BigNumberish,
      amountUsdAfterRepayAndSellCollateral: BigNumberish,
      amountUsdAfterBuyCollateralAndRepay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDeposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      depositAmount: BigNumberish,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitLiquidation"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPoolUpdated"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRemove"
  ): TypedContractMethod<
    [
      remover: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      liquidity: BigNumberish,
      to: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRepay"
  ): TypedContractMethod<
    [
      repayer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      repayAmount: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitSwap"
  ): TypedContractMethod<
    [
      account: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw"
  ): TypedContractMethod<
    [
      withdrawer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      withdrawAmount: BigNumberish,
      to: AddressLike,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
