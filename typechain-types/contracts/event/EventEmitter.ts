/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Event {
  export type LiquidationStruct = {
    baseCollateral: BigNumberish;
    baseDebtScaled: BigNumberish;
    memeCollateral: BigNumberish;
    memeDebtScaled: BigNumberish;
  };

  export type LiquidationStructOutput = [
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ] & {
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  };
}

export interface EventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emitAdd"
      | "emitBorrow"
      | "emitClaimFees"
      | "emitClose"
      | "emitDeposit"
      | "emitLiquidation"
      | "emitPoolCreated"
      | "emitPoolUpdated"
      | "emitRemove"
      | "emitRepay"
      | "emitSwap"
      | "emitWithdraw"
      | "roleStore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Add"
      | "Borrow"
      | "ClaimFees"
      | "Close"
      | "Deposit"
      | "Liquidation"
      | "PoolCreated"
      | "PoolUpdated"
      | "Remove"
      | "Repay"
      | "Swap"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emitAdd",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitBorrow",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimFees",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClose",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitLiquidation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPoolCreated",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPoolUpdated",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRemove",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRepay",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwap",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      Event.LiquidationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;

  decodeFunctionResult(functionFragment: "emitAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPoolCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPoolUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitRepay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
}

export namespace AddEvent {
  export type InputTuple = [
    adder: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    to: AddressLike,
    baseAmount: BigNumberish,
    memeAmount: BigNumberish
  ];
  export type OutputTuple = [
    adder: string,
    baseToken: string,
    memeToken: string,
    to: string,
    baseAmount: bigint,
    memeAmount: bigint
  ];
  export interface OutputObject {
    adder: string;
    baseToken: string;
    memeToken: string;
    to: string;
    baseAmount: bigint;
    memeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    positionId: BigNumberish,
    tokenIndex: BigNumberish,
    borrowAmount: BigNumberish,
    borrowRate: BigNumberish,
    baseCollateral: BigNumberish,
    baseDebtScaled: BigNumberish,
    memeCollateral: BigNumberish,
    memeDebtScaled: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    baseToken: string,
    memeToken: string,
    positionId: bigint,
    tokenIndex: bigint,
    borrowAmount: bigint,
    borrowRate: bigint,
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ];
  export interface OutputObject {
    borrower: string;
    baseToken: string;
    memeToken: string;
    positionId: bigint;
    tokenIndex: bigint;
    borrowAmount: bigint;
    borrowRate: bigint;
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    pool: AddressLike,
    scaledUnclaimedFee: BigNumberish,
    liquidityIndex: BigNumberish,
    unclaimedFee: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    scaledUnclaimedFee: bigint,
    liquidityIndex: bigint,
    unclaimedFee: bigint
  ];
  export interface OutputObject {
    pool: string;
    scaledUnclaimedFee: bigint;
    liquidityIndex: bigint;
    unclaimedFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseEvent {
  export type InputTuple = [account: AddressLike, positionId: BigNumberish];
  export type OutputTuple = [account: string, positionId: bigint];
  export interface OutputObject {
    account: string;
    positionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositor: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    positionId: BigNumberish,
    depositAmount: BigNumberish,
    baseCollateral: BigNumberish,
    baseDebtScaled: BigNumberish,
    memeCollateral: BigNumberish,
    memeDebtScaled: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    baseToken: string,
    memeToken: string,
    positionId: bigint,
    depositAmount: bigint,
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ];
  export interface OutputObject {
    depositor: string;
    baseToken: string;
    memeToken: string;
    positionId: bigint;
    depositAmount: bigint;
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    account: AddressLike,
    positionId: BigNumberish,
    marginLevel: BigNumberish,
    marginLevelLiquidationThreshold: BigNumberish,
    totalCollateralUsd: BigNumberish,
    totalDebtUsd: BigNumberish,
    memePrice: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    account: string,
    positionId: bigint,
    marginLevel: bigint,
    marginLevelLiquidationThreshold: bigint,
    totalCollateralUsd: bigint,
    totalDebtUsd: bigint,
    memePrice: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    account: string;
    positionId: bigint;
    marginLevel: bigint;
    marginLevelLiquidationThreshold: bigint;
    totalCollateralUsd: bigint;
    totalDebtUsd: bigint;
    memePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    baseToken: AddressLike,
    memeToken: AddressLike,
    source: AddressLike,
    createdTimestamp: BigNumberish,
    baseDecimals: BigNumberish,
    memeDecimals: BigNumberish
  ];
  export type OutputTuple = [
    baseToken: string,
    memeToken: string,
    source: string,
    createdTimestamp: bigint,
    baseDecimals: bigint,
    memeDecimals: bigint
  ];
  export interface OutputObject {
    baseToken: string;
    memeToken: string;
    source: string;
    createdTimestamp: bigint;
    baseDecimals: bigint;
    memeDecimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolUpdatedEvent {
  export type InputTuple = [
    pool: AddressLike,
    liquidityRate: BigNumberish,
    borrowRate: BigNumberish,
    liquidityIndex: BigNumberish,
    borrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    liquidityRate: bigint,
    borrowRate: bigint,
    liquidityIndex: bigint,
    borrowIndex: bigint
  ];
  export interface OutputObject {
    pool: string;
    liquidityRate: bigint;
    borrowRate: bigint;
    liquidityIndex: bigint;
    borrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveEvent {
  export type InputTuple = [
    remover: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    liquidity: BigNumberish,
    to: AddressLike,
    baseAmount: BigNumberish,
    memeAmount: BigNumberish
  ];
  export type OutputTuple = [
    remover: string,
    baseToken: string,
    memeToken: string,
    liquidity: bigint,
    to: string,
    baseAmount: bigint,
    memeAmount: bigint
  ];
  export interface OutputObject {
    remover: string;
    baseToken: string;
    memeToken: string;
    liquidity: bigint;
    to: string;
    baseAmount: bigint;
    memeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    repayer: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    positionId: BigNumberish,
    tokenIndex: BigNumberish,
    repayAmount: BigNumberish,
    baseCollateral: BigNumberish,
    baseDebtScaled: BigNumberish,
    memeCollateral: BigNumberish,
    memeDebtScaled: BigNumberish
  ];
  export type OutputTuple = [
    repayer: string,
    baseToken: string,
    memeToken: string,
    positionId: bigint,
    tokenIndex: bigint,
    repayAmount: bigint,
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ];
  export interface OutputObject {
    repayer: string;
    baseToken: string;
    memeToken: string;
    positionId: bigint;
    tokenIndex: bigint;
    repayAmount: bigint;
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    account: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    positionId: BigNumberish,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    fee: BigNumberish,
    baseCollateral: BigNumberish,
    baseDebtScaled: BigNumberish,
    memeCollateral: BigNumberish,
    memeDebtScaled: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    tokenIn: string,
    tokenOut: string,
    positionId: bigint,
    amountIn: bigint,
    amountOut: bigint,
    fee: bigint,
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ];
  export interface OutputObject {
    account: string;
    tokenIn: string;
    tokenOut: string;
    positionId: bigint;
    amountIn: bigint;
    amountOut: bigint;
    fee: bigint;
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    withdrawer: AddressLike,
    baseToken: AddressLike,
    memeToken: AddressLike,
    positionId: BigNumberish,
    withdrawAmount: BigNumberish,
    to: AddressLike,
    baseCollateral: BigNumberish,
    baseDebtScaled: BigNumberish,
    memeCollateral: BigNumberish,
    memeDebtScaled: BigNumberish
  ];
  export type OutputTuple = [
    withdrawer: string,
    baseToken: string,
    memeToken: string,
    positionId: bigint,
    withdrawAmount: bigint,
    to: string,
    baseCollateral: bigint,
    baseDebtScaled: bigint,
    memeCollateral: bigint,
    memeDebtScaled: bigint
  ];
  export interface OutputObject {
    withdrawer: string;
    baseToken: string;
    memeToken: string;
    positionId: bigint;
    withdrawAmount: bigint;
    to: string;
    baseCollateral: bigint;
    baseDebtScaled: bigint;
    memeCollateral: bigint;
    memeDebtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): EventEmitter;
  waitForDeployment(): Promise<this>;

  interface: EventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitAdd: TypedContractMethod<
    [
      supplier: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      to: AddressLike,
      baseAmount: BigNumberish,
      memeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitBorrow: TypedContractMethod<
    [
      borrower: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitClaimFees: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitClose: TypedContractMethod<
    [account: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emitDeposit: TypedContractMethod<
    [
      depositor: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      depositAmount: BigNumberish,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitLiquidation: TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      positionId: BigNumberish,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish,
      memePrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitPoolCreated: TypedContractMethod<
    [
      baseToken: AddressLike,
      memeToken: AddressLike,
      source: AddressLike,
      createdTimestamp: BigNumberish,
      baseDecimals: BigNumberish,
      memeDecimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitPoolUpdated: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitRemove: TypedContractMethod<
    [
      remover: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      liquidity: BigNumberish,
      to: AddressLike,
      baseAmount: BigNumberish,
      memeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitRepay: TypedContractMethod<
    [
      repayer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      repayAmount: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitSwap: TypedContractMethod<
    [
      account: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      positionId: BigNumberish,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;

  emitWithdraw: TypedContractMethod<
    [
      withdrawer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      withdrawAmount: BigNumberish,
      to: AddressLike,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  roleStore: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitAdd"
  ): TypedContractMethod<
    [
      supplier: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      to: AddressLike,
      baseAmount: BigNumberish,
      memeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitBorrow"
  ): TypedContractMethod<
    [
      borrower: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClaimFees"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClose"
  ): TypedContractMethod<
    [account: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDeposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      depositAmount: BigNumberish,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitLiquidation"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      positionId: BigNumberish,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish,
      memePrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPoolCreated"
  ): TypedContractMethod<
    [
      baseToken: AddressLike,
      memeToken: AddressLike,
      source: AddressLike,
      createdTimestamp: BigNumberish,
      baseDecimals: BigNumberish,
      memeDecimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPoolUpdated"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRemove"
  ): TypedContractMethod<
    [
      remover: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      liquidity: BigNumberish,
      to: AddressLike,
      baseAmount: BigNumberish,
      memeAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRepay"
  ): TypedContractMethod<
    [
      repayer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      tokenIndex: BigNumberish,
      repayAmount: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitSwap"
  ): TypedContractMethod<
    [
      account: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      positionId: BigNumberish,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      liquidation: Event.LiquidationStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw"
  ): TypedContractMethod<
    [
      withdrawer: AddressLike,
      baseToken: AddressLike,
      memeToken: AddressLike,
      positionId: BigNumberish,
      withdrawAmount: BigNumberish,
      to: AddressLike,
      baseCollateral: BigNumberish,
      baseDebtScaled: BigNumberish,
      memeCollateral: BigNumberish,
      memeDebtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Add"
  ): TypedContractEvent<
    AddEvent.InputTuple,
    AddEvent.OutputTuple,
    AddEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "Close"
  ): TypedContractEvent<
    CloseEvent.InputTuple,
    CloseEvent.OutputTuple,
    CloseEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolUpdated"
  ): TypedContractEvent<
    PoolUpdatedEvent.InputTuple,
    PoolUpdatedEvent.OutputTuple,
    PoolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Remove"
  ): TypedContractEvent<
    RemoveEvent.InputTuple,
    RemoveEvent.OutputTuple,
    RemoveEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Add(address,address,address,address,uint256,uint256)": TypedContractEvent<
      AddEvent.InputTuple,
      AddEvent.OutputTuple,
      AddEvent.OutputObject
    >;
    Add: TypedContractEvent<
      AddEvent.InputTuple,
      AddEvent.OutputTuple,
      AddEvent.OutputObject
    >;

    "Borrow(address,address,address,uint256,uint8,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "ClaimFees(address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "Close(address,uint256)": TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;
    Close: TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;

    "Deposit(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Liquidation(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "PoolCreated(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;
    PoolUpdated: TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;

    "Remove(address,address,address,uint256,address,uint256,uint256)": TypedContractEvent<
      RemoveEvent.InputTuple,
      RemoveEvent.OutputTuple,
      RemoveEvent.OutputObject
    >;
    Remove: TypedContractEvent<
      RemoveEvent.InputTuple,
      RemoveEvent.OutputTuple,
      RemoveEvent.OutputObject
    >;

    "Repay(address,address,address,uint256,uint8,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "Swap(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
