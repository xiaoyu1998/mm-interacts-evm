/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emitBorrow"
      | "emitClaimFees"
      | "emitClose"
      | "emitClosePosition"
      | "emitDeposit"
      | "emitLiquidation"
      | "emitPoolUpdated"
      | "emitPositionLiquidation"
      | "emitRepay"
      | "emitSupply"
      | "emitSwap"
      | "emitWithdraw(address,address,address,uint256,uint256,uint256)"
      | "emitWithdraw(address,address,address,uint256)"
      | "roleStore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrow"
      | "ClaimFees"
      | "Close"
      | "ClosePosition"
      | "Deposit"
      | "Liquidation"
      | "PoolUpdated"
      | "PositionLiquidation"
      | "Repay"
      | "Supply"
      | "Swap"
      | "Withdraw(address,address,address,uint256)"
      | "Withdraw(address,address,address,uint256,uint256,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emitBorrow",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimFees",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClose",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClosePosition",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitLiquidation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPoolUpdated",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPositionLiquidation",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitRepay",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSupply",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwap",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw(address,address,address,uint256,uint256,uint256)",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw(address,address,address,uint256)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;

  decodeFunctionResult(functionFragment: "emitBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitClaimFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPoolUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPositionLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitRepay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw(address,address,address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    pool: AddressLike,
    borrower: AddressLike,
    amount: BigNumberish,
    borrowRate: BigNumberish,
    collateral: BigNumberish,
    debtScaled: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    borrower: string,
    amount: bigint,
    borrowRate: bigint,
    collateral: bigint,
    debtScaled: bigint
  ];
  export interface OutputObject {
    pool: string;
    borrower: string;
    amount: bigint;
    borrowRate: bigint;
    collateral: bigint;
    debtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    pool: AddressLike,
    scaledUnclaimedFee: BigNumberish,
    liquidityIndex: BigNumberish,
    unclaimedFee: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    scaledUnclaimedFee: bigint,
    liquidityIndex: bigint,
    unclaimedFee: bigint
  ];
  export interface OutputObject {
    pool: string;
    scaledUnclaimedFee: bigint;
    liquidityIndex: bigint;
    unclaimedFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseEvent {
  export type InputTuple = [
    poolUsd: AddressLike,
    account: AddressLike,
    amountUsdStartClose: BigNumberish,
    amountUsdAfterRepayAndSellCollateral: BigNumberish,
    amountUsdAfterBuyCollateralAndRepay: BigNumberish
  ];
  export type OutputTuple = [
    poolUsd: string,
    account: string,
    amountUsdStartClose: bigint,
    amountUsdAfterRepayAndSellCollateral: bigint,
    amountUsdAfterBuyCollateralAndRepay: bigint
  ];
  export interface OutputObject {
    poolUsd: string;
    account: string;
    amountUsdStartClose: bigint;
    amountUsdAfterRepayAndSellCollateral: bigint;
    amountUsdAfterBuyCollateralAndRepay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosePositionEvent {
  export type InputTuple = [
    pool: AddressLike,
    poolUsd: AddressLike,
    account: AddressLike,
    collateralSold: BigNumberish,
    debtClosed: BigNumberish,
    remainCollateral: BigNumberish,
    remainUsd: BigNumberish,
    collateralUsd: BigNumberish,
    debtScaledUsd: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    poolUsd: string,
    account: string,
    collateralSold: bigint,
    debtClosed: bigint,
    remainCollateral: bigint,
    remainUsd: bigint,
    collateralUsd: bigint,
    debtScaledUsd: bigint
  ];
  export interface OutputObject {
    pool: string;
    poolUsd: string;
    account: string;
    collateralSold: bigint;
    debtClosed: bigint;
    remainCollateral: bigint;
    remainUsd: bigint;
    collateralUsd: bigint;
    debtScaledUsd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    pool: AddressLike,
    depositer: AddressLike,
    amount: BigNumberish,
    collateral: BigNumberish,
    debtScaled: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    depositer: string,
    amount: bigint,
    collateral: bigint,
    debtScaled: bigint
  ];
  export interface OutputObject {
    pool: string;
    depositer: string;
    amount: bigint;
    collateral: bigint;
    debtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    account: AddressLike,
    marginLevel: BigNumberish,
    marginLevelLiquidationThreshold: BigNumberish,
    totalCollateralUsd: BigNumberish,
    totalDebtUsd: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    account: string,
    marginLevel: bigint,
    marginLevelLiquidationThreshold: bigint,
    totalCollateralUsd: bigint,
    totalDebtUsd: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    account: string;
    marginLevel: bigint;
    marginLevelLiquidationThreshold: bigint;
    totalCollateralUsd: bigint;
    totalDebtUsd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolUpdatedEvent {
  export type InputTuple = [
    pool: AddressLike,
    liquidityRate: BigNumberish,
    borrowRate: BigNumberish,
    liquidityIndex: BigNumberish,
    borrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    liquidityRate: bigint,
    borrowRate: bigint,
    liquidityIndex: bigint,
    borrowIndex: bigint
  ];
  export interface OutputObject {
    pool: string;
    liquidityRate: bigint;
    borrowRate: bigint;
    liquidityIndex: bigint;
    borrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLiquidationEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    pool: AddressLike,
    account: AddressLike,
    collateral: BigNumberish,
    debt: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    pool: string,
    account: string,
    collateral: bigint,
    debt: bigint,
    price: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    pool: string;
    account: string;
    collateral: bigint;
    debt: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    pool: AddressLike,
    repayer: AddressLike,
    amount: BigNumberish,
    useCollateral: boolean,
    collateral: BigNumberish,
    debtScaled: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    repayer: string,
    amount: bigint,
    useCollateral: boolean,
    collateral: bigint,
    debtScaled: bigint
  ];
  export interface OutputObject {
    pool: string;
    repayer: string;
    amount: bigint;
    useCollateral: boolean;
    collateral: bigint;
    debtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [
    pool: AddressLike,
    supplier: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    supplier: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    pool: string;
    supplier: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    poolIn: AddressLike,
    poolOut: AddressLike,
    account: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    fee: BigNumberish,
    collateralIn: BigNumberish,
    debtScaledIn: BigNumberish,
    collateralOut: BigNumberish,
    debtScaledOut: BigNumberish
  ];
  export type OutputTuple = [
    poolIn: string,
    poolOut: string,
    account: string,
    amountIn: bigint,
    amountOut: bigint,
    fee: bigint,
    collateralIn: bigint,
    debtScaledIn: bigint,
    collateralOut: bigint,
    debtScaledOut: bigint
  ];
  export interface OutputObject {
    poolIn: string;
    poolOut: string;
    account: string;
    amountIn: bigint;
    amountOut: bigint;
    fee: bigint;
    collateralIn: bigint;
    debtScaledIn: bigint;
    collateralOut: bigint;
    debtScaledOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Withdraw_address_address_address_uint256_Event {
  export type InputTuple = [
    pool: AddressLike,
    withdrawer: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    withdrawer: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    pool: string;
    withdrawer: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Withdraw_address_address_address_uint256_uint256_uint256_Event {
  export type InputTuple = [
    pool: AddressLike,
    withdrawer: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    collateral: BigNumberish,
    debtScaled: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    withdrawer: string,
    to: string,
    amount: bigint,
    collateral: bigint,
    debtScaled: bigint
  ];
  export interface OutputObject {
    pool: string;
    withdrawer: string;
    to: string;
    amount: bigint;
    collateral: bigint;
    debtScaled: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): EventEmitter;
  waitForDeployment(): Promise<this>;

  interface: EventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitBorrow: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitClaimFees: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitClose: TypedContractMethod<
    [
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      amountUsdStartClose: BigNumberish,
      amountUsdAfterRepayAndSellCollateral: BigNumberish,
      amountUsdAfterBuyCollateralAndRepay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitClosePosition: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      collateralAmountToSell: BigNumberish,
      debtAmountClosed: BigNumberish,
      remainAmount: BigNumberish,
      remainAmountUsd: BigNumberish,
      collateralUsd: BigNumberish,
      debtScaledUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitDeposit: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      depositAmount: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitLiquidation: TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitPoolUpdated: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitPositionLiquidation: TypedContractMethod<
    [
      liquidator: AddressLike,
      underlyingAsset: AddressLike,
      account: AddressLike,
      collateral: BigNumberish,
      debt: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitRepay: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      repayer: AddressLike,
      repayAmount: BigNumberish,
      useCollateral: boolean,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitSupply: TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      supplyAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitSwap: TypedContractMethod<
    [
      underlyingAssetIn: AddressLike,
      underlyingAssetOut: AddressLike,
      account: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      collateralIn: BigNumberish,
      debtScaledIn: BigNumberish,
      collateralOut: BigNumberish,
      debtScaledOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "emitWithdraw(address,address,address,uint256,uint256,uint256)": TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      withdrawAmount: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "emitWithdraw(address,address,address,uint256)": TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  roleStore: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitBorrow"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      borrowAmount: BigNumberish,
      borrowRate: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClaimFees"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      scaledUnclaimedFee: BigNumberish,
      liquidityIndex: BigNumberish,
      unclaimedFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClose"
  ): TypedContractMethod<
    [
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      amountUsdStartClose: BigNumberish,
      amountUsdAfterRepayAndSellCollateral: BigNumberish,
      amountUsdAfterBuyCollateralAndRepay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitClosePosition"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      underlyingAssetUsd: AddressLike,
      account: AddressLike,
      collateralAmountToSell: BigNumberish,
      debtAmountClosed: BigNumberish,
      remainAmount: BigNumberish,
      remainAmountUsd: BigNumberish,
      collateralUsd: BigNumberish,
      debtScaledUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDeposit"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      depositAmount: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitLiquidation"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      account: AddressLike,
      marginLevel: BigNumberish,
      marginLevelLiquidationThreshold: BigNumberish,
      totalCollateralUsd: BigNumberish,
      totalDebtUsd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPoolUpdated"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      liquidityRate: BigNumberish,
      borrowRate: BigNumberish,
      liquidityIndex: BigNumberish,
      borrowIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPositionLiquidation"
  ): TypedContractMethod<
    [
      liquidator: AddressLike,
      underlyingAsset: AddressLike,
      account: AddressLike,
      collateral: BigNumberish,
      debt: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitRepay"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      repayer: AddressLike,
      repayAmount: BigNumberish,
      useCollateral: boolean,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitSupply"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      supplyAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitSwap"
  ): TypedContractMethod<
    [
      underlyingAssetIn: AddressLike,
      underlyingAssetOut: AddressLike,
      account: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      fee: BigNumberish,
      collateralIn: BigNumberish,
      debtScaledIn: BigNumberish,
      collateralOut: BigNumberish,
      debtScaledOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw(address,address,address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      withdrawAmount: BigNumberish,
      collateral: BigNumberish,
      debtScaled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw(address,address,address,uint256)"
  ): TypedContractMethod<
    [
      underlyingAsset: AddressLike,
      account: AddressLike,
      to: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "Close"
  ): TypedContractEvent<
    CloseEvent.InputTuple,
    CloseEvent.OutputTuple,
    CloseEvent.OutputObject
  >;
  getEvent(
    key: "ClosePosition"
  ): TypedContractEvent<
    ClosePositionEvent.InputTuple,
    ClosePositionEvent.OutputTuple,
    ClosePositionEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "PoolUpdated"
  ): TypedContractEvent<
    PoolUpdatedEvent.InputTuple,
    PoolUpdatedEvent.OutputTuple,
    PoolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionLiquidation"
  ): TypedContractEvent<
    PositionLiquidationEvent.InputTuple,
    PositionLiquidationEvent.OutputTuple,
    PositionLiquidationEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw(address,address,address,uint256)"
  ): TypedContractEvent<
    Withdraw_address_address_address_uint256_Event.InputTuple,
    Withdraw_address_address_address_uint256_Event.OutputTuple,
    Withdraw_address_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Withdraw(address,address,address,uint256,uint256,uint256)"
  ): TypedContractEvent<
    Withdraw_address_address_address_uint256_uint256_uint256_Event.InputTuple,
    Withdraw_address_address_address_uint256_uint256_uint256_Event.OutputTuple,
    Withdraw_address_address_address_uint256_uint256_uint256_Event.OutputObject
  >;

  filters: {
    "Borrow(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "ClaimFees(address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "Close(address,address,uint256,uint256,uint256)": TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;
    Close: TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;

    "ClosePosition(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;
    ClosePosition: TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Liquidation(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "PoolUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;
    PoolUpdated: TypedContractEvent<
      PoolUpdatedEvent.InputTuple,
      PoolUpdatedEvent.OutputTuple,
      PoolUpdatedEvent.OutputObject
    >;

    "PositionLiquidation(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      PositionLiquidationEvent.InputTuple,
      PositionLiquidationEvent.OutputTuple,
      PositionLiquidationEvent.OutputObject
    >;
    PositionLiquidation: TypedContractEvent<
      PositionLiquidationEvent.InputTuple,
      PositionLiquidationEvent.OutputTuple,
      PositionLiquidationEvent.OutputObject
    >;

    "Repay(address,address,uint256,bool,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "Supply(address,address,address,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "Swap(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256)": TypedContractEvent<
      Withdraw_address_address_address_uint256_Event.InputTuple,
      Withdraw_address_address_address_uint256_Event.OutputTuple,
      Withdraw_address_address_address_uint256_Event.OutputObject
    >;
    "Withdraw(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      Withdraw_address_address_address_uint256_uint256_uint256_Event.InputTuple,
      Withdraw_address_address_address_uint256_uint256_uint256_Event.OutputTuple,
      Withdraw_address_address_address_uint256_uint256_uint256_Event.OutputObject
    >;
  };
}
