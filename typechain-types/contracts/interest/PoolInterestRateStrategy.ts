/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace PoolInterestRateStrategy {
  export type InterestRateStrategyParamsStruct = {
    optimalUsageRatio: BigNumberish;
    rate0: BigNumberish;
    rateSlope1: BigNumberish[];
    rateSlope2: BigNumberish[];
  };

  export type InterestRateStrategyParamsStructOutput = [
    optimalUsageRatio: bigint,
    rate0: bigint,
    rateSlope1: bigint[],
    rateSlope2: bigint[]
  ] & {
    optimalUsageRatio: bigint;
    rate0: bigint;
    rateSlope1: bigint[];
    rateSlope2: bigint[];
  };
}

export declare namespace InterestUtils {
  export type CalculateInterestRatesParamsStruct = {
    totalPoolBalance: BigNumberish;
    totalDebt: BigNumberish;
    totalPoolBalanceBase: BigNumberish;
  };

  export type CalculateInterestRatesParamsStructOutput = [
    totalPoolBalance: bigint,
    totalDebt: bigint,
    totalPoolBalanceBase: bigint
  ] & {
    totalPoolBalance: bigint;
    totalDebt: bigint;
    totalPoolBalanceBase: bigint;
  };
}

export interface PoolInterestRateStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BALANCE10000"
      | "BALANCE1000000"
      | "BALANCE50000"
      | "BALANCE500000"
      | "MAX_EXCESS_USAGE_RATIO"
      | "OPTIMAL_USAGE_RATIO"
      | "SLOPESIZE"
      | "calculateInterestRates"
      | "getOptimalUsageRatio"
      | "getRateSlope1"
      | "getRateSlope2"
      | "getRatebase"
      | "getSlopeIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BALANCE10000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALANCE1000000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALANCE50000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALANCE500000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXCESS_USAGE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMAL_USAGE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SLOPESIZE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [InterestUtils.CalculateInterestRatesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptimalUsageRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRatebase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSlopeIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BALANCE10000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALANCE1000000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALANCE50000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALANCE500000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXCESS_USAGE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMAL_USAGE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SLOPESIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptimalUsageRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRatebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlopeIndex",
    data: BytesLike
  ): Result;
}

export interface PoolInterestRateStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): PoolInterestRateStrategy;
  waitForDeployment(): Promise<this>;

  interface: PoolInterestRateStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BALANCE10000: TypedContractMethod<[], [bigint], "view">;

  BALANCE1000000: TypedContractMethod<[], [bigint], "view">;

  BALANCE50000: TypedContractMethod<[], [bigint], "view">;

  BALANCE500000: TypedContractMethod<[], [bigint], "view">;

  MAX_EXCESS_USAGE_RATIO: TypedContractMethod<[], [bigint], "view">;

  OPTIMAL_USAGE_RATIO: TypedContractMethod<[], [bigint], "view">;

  SLOPESIZE: TypedContractMethod<[], [bigint], "view">;

  calculateInterestRates: TypedContractMethod<
    [params: InterestUtils.CalculateInterestRatesParamsStruct],
    [bigint],
    "view"
  >;

  getOptimalUsageRatio: TypedContractMethod<[], [bigint], "view">;

  getRateSlope1: TypedContractMethod<[], [bigint[]], "view">;

  getRateSlope2: TypedContractMethod<[], [bigint[]], "view">;

  getRatebase: TypedContractMethod<[], [bigint], "view">;

  getSlopeIndex: TypedContractMethod<[balance: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BALANCE10000"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BALANCE1000000"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BALANCE50000"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BALANCE500000"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EXCESS_USAGE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPTIMAL_USAGE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLOPESIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateInterestRates"
  ): TypedContractMethod<
    [params: InterestUtils.CalculateInterestRatesParamsStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOptimalUsageRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRateSlope1"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRateSlope2"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRatebase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlopeIndex"
  ): TypedContractMethod<[balance: BigNumberish], [bigint], "view">;

  filters: {};
}
