/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ReaderPoolUtils {
  export type AssetStruct = {
    token: AddressLike;
    symbol: string;
    decimals: BigNumberish;
    borrowIndex: BigNumberish;
    borrowApy: BigNumberish;
    totalCollateral: BigNumberish;
    totalCollateralWithDebt: BigNumberish;
    totalDebtScaled: BigNumberish;
    poolBalance: BigNumberish;
    priceLiquidity: BigNumberish;
    avaiableLoan: BigNumberish;
    actualTradable: BigNumberish;
  };

  export type AssetStructOutput = [
    token: string,
    symbol: string,
    decimals: bigint,
    borrowIndex: bigint,
    borrowApy: bigint,
    totalCollateral: bigint,
    totalCollateralWithDebt: bigint,
    totalDebtScaled: bigint,
    poolBalance: bigint,
    priceLiquidity: bigint,
    avaiableLoan: bigint,
    actualTradable: bigint
  ] & {
    token: string;
    symbol: string;
    decimals: bigint;
    borrowIndex: bigint;
    borrowApy: bigint;
    totalCollateral: bigint;
    totalCollateralWithDebt: bigint;
    totalDebtScaled: bigint;
    poolBalance: bigint;
    priceLiquidity: bigint;
    avaiableLoan: bigint;
    actualTradable: bigint;
  };

  export type GetPoolStruct = {
    assets: [ReaderPoolUtils.AssetStruct, ReaderPoolUtils.AssetStruct];
    bank: AddressLike;
    interestRateStrategy: AddressLike;
    configuration: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    priceDecimals: BigNumberish;
    price: BigNumberish;
    source: AddressLike;
    shortEnabled: boolean;
    createdTimestamp: BigNumberish;
    unclaimedFee: BigNumberish;
    memeMaxDepositAmount: BigNumberish;
    averagePrice: BigNumberish;
  };

  export type GetPoolStructOutput = [
    assets: [
      ReaderPoolUtils.AssetStructOutput,
      ReaderPoolUtils.AssetStructOutput
    ],
    bank: string,
    interestRateStrategy: string,
    configuration: bigint,
    lastUpdateTimestamp: bigint,
    priceDecimals: bigint,
    price: bigint,
    source: string,
    shortEnabled: boolean,
    createdTimestamp: bigint,
    unclaimedFee: bigint,
    memeMaxDepositAmount: bigint,
    averagePrice: bigint
  ] & {
    assets: [
      ReaderPoolUtils.AssetStructOutput,
      ReaderPoolUtils.AssetStructOutput
    ];
    bank: string;
    interestRateStrategy: string;
    configuration: bigint;
    lastUpdateTimestamp: bigint;
    priceDecimals: bigint;
    price: bigint;
    source: string;
    shortEnabled: boolean;
    createdTimestamp: bigint;
    unclaimedFee: bigint;
    memeMaxDepositAmount: bigint;
    averagePrice: bigint;
  };

  export type AssetInfoStruct = {
    token: AddressLike;
    symbol: string;
    decimals: BigNumberish;
    borrowIndex: BigNumberish;
  };

  export type AssetInfoStructOutput = [
    token: string,
    symbol: string,
    decimals: bigint,
    borrowIndex: bigint
  ] & { token: string; symbol: string; decimals: bigint; borrowIndex: bigint };

  export type GetPoolInfoStruct = {
    assets: [ReaderPoolUtils.AssetInfoStruct, ReaderPoolUtils.AssetInfoStruct];
    priceDecimals: BigNumberish;
    price: BigNumberish;
  };

  export type GetPoolInfoStructOutput = [
    assets: [
      ReaderPoolUtils.AssetInfoStructOutput,
      ReaderPoolUtils.AssetInfoStructOutput
    ],
    priceDecimals: bigint,
    price: bigint
  ] & {
    assets: [
      ReaderPoolUtils.AssetInfoStructOutput,
      ReaderPoolUtils.AssetInfoStructOutput
    ];
    priceDecimals: bigint;
    price: bigint;
  };
}

export interface ReaderPoolUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calcAmountIn"
      | "calcAmountOut"
      | "calcLiquidityOut"
      | "calcTokenPairOut"
      | "getPools"
      | "getPoolsInfo(address,uint256,uint256)"
      | "getPoolsInfo(address,bytes32[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcAmountIn",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcAmountOut",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLiquidityOut",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenPairOut",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsInfo(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsInfo(address,bytes32[])",
    values: [AddressLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLiquidityOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenPairOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsInfo(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsInfo(address,bytes32[])",
    data: BytesLike
  ): Result;
}

export interface ReaderPoolUtils extends BaseContract {
  connect(runner?: ContractRunner | null): ReaderPoolUtils;
  waitForDeployment(): Promise<this>;

  interface: ReaderPoolUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calcAmountIn: TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountOut: BigNumberish,
      tokenOutIndex: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  calcAmountOut: TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountIn: BigNumberish,
      tokenInIndex: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  calcLiquidityOut: TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calcTokenPairOut: TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      liquidity: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  getPools: TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [ReaderPoolUtils.GetPoolStructOutput[]],
    "view"
  >;

  "getPoolsInfo(address,uint256,uint256)": TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [ReaderPoolUtils.GetPoolInfoStructOutput[]],
    "view"
  >;

  "getPoolsInfo(address,bytes32[])": TypedContractMethod<
    [dataStore: AddressLike, poolKeys: BytesLike[]],
    [ReaderPoolUtils.GetPoolInfoStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calcAmountIn"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountOut: BigNumberish,
      tokenOutIndex: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcAmountOut"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountIn: BigNumberish,
      tokenInIndex: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcLiquidityOut"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calcTokenPairOut"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      liquidity: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPools"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [ReaderPoolUtils.GetPoolStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolsInfo(address,uint256,uint256)"
  ): TypedContractMethod<
    [dataStore: AddressLike, start: BigNumberish, end: BigNumberish],
    [ReaderPoolUtils.GetPoolInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolsInfo(address,bytes32[])"
  ): TypedContractMethod<
    [dataStore: AddressLike, poolKeys: BytesLike[]],
    [ReaderPoolUtils.GetPoolInfoStructOutput[]],
    "view"
  >;

  filters: {};
}
