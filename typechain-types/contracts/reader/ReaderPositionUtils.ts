/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ReaderPositionUtils {
  export type AssetStruct = {
    token: AddressLike;
    symbol: string;
    decimals: BigNumberish;
    balance: BigNumberish;
    debt: BigNumberish;
    netWorth: BigNumberish;
    maxRedeemAmount: BigNumberish;
    borrowApy: BigNumberish;
  };

  export type AssetStructOutput = [
    token: string,
    symbol: string,
    decimals: bigint,
    balance: bigint,
    debt: bigint,
    netWorth: bigint,
    maxRedeemAmount: bigint,
    borrowApy: bigint
  ] & {
    token: string;
    symbol: string;
    decimals: bigint;
    balance: bigint;
    debt: bigint;
    netWorth: bigint;
    maxRedeemAmount: bigint;
    borrowApy: bigint;
  };

  export type GetPositionStruct = {
    assets: [ReaderPositionUtils.AssetStruct, ReaderPositionUtils.AssetStruct];
    id: BigNumberish;
    account: AddressLike;
    marginLevel: BigNumberish;
    equity: BigNumberish;
    equityValue: BigNumberish;
    entryPrice: BigNumberish;
    IndexPrice: BigNumberish;
    pnl: BigNumberish;
    liquidationPrice: BigNumberish;
    toLiquidationPrice: BigNumberish;
  };

  export type GetPositionStructOutput = [
    assets: [
      ReaderPositionUtils.AssetStructOutput,
      ReaderPositionUtils.AssetStructOutput
    ],
    id: bigint,
    account: string,
    marginLevel: bigint,
    equity: bigint,
    equityValue: bigint,
    entryPrice: bigint,
    IndexPrice: bigint,
    pnl: bigint,
    liquidationPrice: bigint,
    toLiquidationPrice: bigint
  ] & {
    assets: [
      ReaderPositionUtils.AssetStructOutput,
      ReaderPositionUtils.AssetStructOutput
    ];
    id: bigint;
    account: string;
    marginLevel: bigint;
    equity: bigint;
    equityValue: bigint;
    entryPrice: bigint;
    IndexPrice: bigint;
    pnl: bigint;
    liquidationPrice: bigint;
    toLiquidationPrice: bigint;
  };
}

export interface ReaderPositionUtilsInterface extends Interface {
  getFunction(nameOrSignature: "getPositions"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPositions",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
}

export interface ReaderPositionUtils extends BaseContract {
  connect(runner?: ContractRunner | null): ReaderPositionUtils;
  waitForDeployment(): Promise<this>;

  interface: ReaderPositionUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPositions: TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [ReaderPositionUtils.GetPositionStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPositions"
  ): TypedContractMethod<
    [
      dataStore: AddressLike,
      account: AddressLike,
      start: BigNumberish,
      end: BigNumberish
    ],
    [ReaderPositionUtils.GetPositionStructOutput[]],
    "view"
  >;

  filters: {};
}
