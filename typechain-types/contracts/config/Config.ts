/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dataStore"
      | "multicall"
      | "roleStore"
      | "setDebtSafetyFactor"
      | "setDefaultInterestRateStrategy"
      | "setDefaultPoolConfiguration"
      | "setLiquidationFee"
      | "setMarginLevelThreshold"
      | "setMaxBorrowRate"
      | "setMaxDepositRate"
      | "setShortEnabled"
      | "setShortLiquidityThreshold"
      | "setSwapFeeFactor"
      | "setTokenBase"
      | "setTradableDebtMultipierFactor"
      | "setTreasury"
      | "setTreasuryFeeFactor"
      | "setTwapPeriod"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDebtSafetyFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultInterestRateStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPoolConfiguration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginLevelThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBorrowRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDepositRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShortEnabled",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setShortLiquidityThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeeFactor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenBase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradableDebtMultipierFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFeeFactor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapPeriod",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtSafetyFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultInterestRateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPoolConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginLevelThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDepositRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShortEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShortLiquidityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradableDebtMultipierFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapPeriod",
    data: BytesLike
  ): Result;
}

export interface Config extends BaseContract {
  connect(runner?: ContractRunner | null): Config;
  waitForDeployment(): Promise<this>;

  interface: ConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dataStore: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  roleStore: TypedContractMethod<[], [string], "view">;

  setDebtSafetyFactor: TypedContractMethod<
    [debtSaftyFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultInterestRateStrategy: TypedContractMethod<
    [interestRateStrategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultPoolConfiguration: TypedContractMethod<
    [configuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationFee: TypedContractMethod<
    [liquidationFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarginLevelThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxBorrowRate: TypedContractMethod<
    [maxBorrowRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDepositRate: TypedContractMethod<
    [maxDepositRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setShortEnabled: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, shortEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setShortLiquidityThreshold: TypedContractMethod<
    [shortLiquidityThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapFeeFactor: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, feeFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenBase: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  setTradableDebtMultipierFactor: TypedContractMethod<
    [multipierFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryFeeFactor: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, feeFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTwapPeriod: TypedContractMethod<
    [period: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dataStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDebtSafetyFactor"
  ): TypedContractMethod<[debtSaftyFactor: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultInterestRateStrategy"
  ): TypedContractMethod<
    [interestRateStrategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultPoolConfiguration"
  ): TypedContractMethod<[configuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationFee"
  ): TypedContractMethod<[liquidationFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarginLevelThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxBorrowRate"
  ): TypedContractMethod<[maxBorrowRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDepositRate"
  ): TypedContractMethod<[maxDepositRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShortEnabled"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, shortEnabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShortLiquidityThreshold"
  ): TypedContractMethod<
    [shortLiquidityThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapFeeFactor"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, feeFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenBase"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTradableDebtMultipierFactor"
  ): TypedContractMethod<[multipierFactor: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryFeeFactor"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, feeFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTwapPeriod"
  ): TypedContractMethod<[period: BigNumberish], [void], "nonpayable">;

  filters: {};
}
