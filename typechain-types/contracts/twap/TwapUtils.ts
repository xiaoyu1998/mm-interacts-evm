/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Pool {
  export type AssetStruct = {
    token: AddressLike;
    borrowIndex: BigNumberish;
    borrowRate: BigNumberish;
    totalCollateral: BigNumberish;
    totalCollateralWithDebt: BigNumberish;
    totalDebtScaled: BigNumberish;
    unclaimedFee: BigNumberish;
  };

  export type AssetStructOutput = [
    token: string,
    borrowIndex: bigint,
    borrowRate: bigint,
    totalCollateral: bigint,
    totalCollateralWithDebt: bigint,
    totalDebtScaled: bigint,
    unclaimedFee: bigint
  ] & {
    token: string;
    borrowIndex: bigint;
    borrowRate: bigint;
    totalCollateral: bigint;
    totalCollateralWithDebt: bigint;
    totalDebtScaled: bigint;
    unclaimedFee: bigint;
  };

  export type PropsStruct = {
    assets: [Pool.AssetStruct, Pool.AssetStruct];
    bank: AddressLike;
    interestRateStrategy: AddressLike;
    configuration: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
  };

  export type PropsStructOutput = [
    assets: [Pool.AssetStructOutput, Pool.AssetStructOutput],
    bank: string,
    interestRateStrategy: string,
    configuration: bigint,
    lastUpdateTimestamp: bigint
  ] & {
    assets: [Pool.AssetStructOutput, Pool.AssetStructOutput];
    bank: string;
    interestRateStrategy: string;
    configuration: bigint;
    lastUpdateTimestamp: bigint;
  };
}

export interface TwapUtilsInterface extends Interface {
  getFunction(nameOrSignature: "getTwapPrice"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTwapPrice",
    values: [AddressLike, Pool.PropsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTwapPrice",
    data: BytesLike
  ): Result;
}

export interface TwapUtils extends BaseContract {
  connect(runner?: ContractRunner | null): TwapUtils;
  waitForDeployment(): Promise<this>;

  interface: TwapUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTwapPrice: TypedContractMethod<
    [dataStore: AddressLike, pool: Pool.PropsStruct],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTwapPrice"
  ): TypedContractMethod<
    [dataStore: AddressLike, pool: Pool.PropsStruct],
    [bigint],
    "view"
  >;

  filters: {};
}
