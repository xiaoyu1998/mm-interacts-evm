/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface KeysInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCOUNT_POSITION_LIST"
      | "DEBT_SAFETY_FACTOR"
      | "DEFAULT_INTEREST_RATE_STRATEGY"
      | "DEFAULT_POOL_CONFIGURATION"
      | "MARGIN_LEVELL_THRESHOLD"
      | "MAX_BORROW_RATE"
      | "POOL"
      | "POOL_LIST"
      | "POSITION"
      | "POSITION_LIST"
      | "REENTRANCY_GUARD_STATUS"
      | "SHORT_LIQUIDITY_THRESHOLD"
      | "TOKEN_BASE"
      | "TREASURY"
      | "WNT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCOUNT_POSITION_LIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEBT_SAFETY_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_INTEREST_RATE_STRATEGY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_POOL_CONFIGURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARGIN_LEVELL_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BORROW_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "POOL_LIST", values?: undefined): string;
  encodeFunctionData(functionFragment: "POSITION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POSITION_LIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REENTRANCY_GUARD_STATUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHORT_LIQUIDITY_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TREASURY", values?: undefined): string;
  encodeFunctionData(functionFragment: "WNT", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACCOUNT_POSITION_LIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEBT_SAFETY_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_INTEREST_RATE_STRATEGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_POOL_CONFIGURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARGIN_LEVELL_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BORROW_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POOL_LIST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POSITION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POSITION_LIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REENTRANCY_GUARD_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_LIQUIDITY_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKEN_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TREASURY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WNT", data: BytesLike): Result;
}

export interface Keys extends BaseContract {
  connect(runner?: ContractRunner | null): Keys;
  waitForDeployment(): Promise<this>;

  interface: KeysInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCOUNT_POSITION_LIST: TypedContractMethod<[], [string], "view">;

  DEBT_SAFETY_FACTOR: TypedContractMethod<[], [string], "view">;

  DEFAULT_INTEREST_RATE_STRATEGY: TypedContractMethod<[], [string], "view">;

  DEFAULT_POOL_CONFIGURATION: TypedContractMethod<[], [string], "view">;

  MARGIN_LEVELL_THRESHOLD: TypedContractMethod<[], [string], "view">;

  MAX_BORROW_RATE: TypedContractMethod<[], [string], "view">;

  POOL: TypedContractMethod<[], [string], "view">;

  POOL_LIST: TypedContractMethod<[], [string], "view">;

  POSITION: TypedContractMethod<[], [string], "view">;

  POSITION_LIST: TypedContractMethod<[], [string], "view">;

  REENTRANCY_GUARD_STATUS: TypedContractMethod<[], [string], "view">;

  SHORT_LIQUIDITY_THRESHOLD: TypedContractMethod<[], [string], "view">;

  TOKEN_BASE: TypedContractMethod<[], [string], "view">;

  TREASURY: TypedContractMethod<[], [string], "view">;

  WNT: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCOUNT_POSITION_LIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEBT_SAFETY_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_INTEREST_RATE_STRATEGY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_POOL_CONFIGURATION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARGIN_LEVELL_THRESHOLD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_BORROW_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_LIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POSITION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POSITION_LIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REENTRANCY_GUARD_STATUS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SHORT_LIQUIDITY_THRESHOLD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_BASE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WNT"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
