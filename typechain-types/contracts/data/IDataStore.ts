/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDataStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAddress"
      | "addBytes32"
      | "containsAddress"
      | "containsBytes32"
      | "getAddress"
      | "getAddressCount"
      | "getAddressValuesAt"
      | "getBool"
      | "getBytes32"
      | "getBytes32Count"
      | "getBytes32ValuesAt"
      | "getUint"
      | "incrementUint"
      | "removeAddress(bytes32,address)"
      | "removeAddress(bytes32)"
      | "removeBool"
      | "removeBytes32(bytes32,bytes32)"
      | "removeBytes32(bytes32)"
      | "removeUint"
      | "setAddress"
      | "setBool"
      | "setBytes32"
      | "setUint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "containsAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "containsBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressValuesAt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBool", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32Count",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32ValuesAt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUint", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "incrementUint",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddress(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddress(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBytes32(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBytes32(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUint",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBytes32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "containsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressValuesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32Count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBytes32ValuesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddress(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeBool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBytes32(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBytes32(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;
}

export interface IDataStore extends BaseContract {
  connect(runner?: ContractRunner | null): IDataStore;
  waitForDeployment(): Promise<this>;

  interface: IDataStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAddress: TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [void],
    "nonpayable"
  >;

  addBytes32: TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  containsAddress: TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [boolean],
    "view"
  >;

  containsBytes32: TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [boolean],
    "view"
  >;

  getAddress: TypedContractMethod<[key: BytesLike], [string], "view">;

  getAddressCount: TypedContractMethod<[setKey: BytesLike], [bigint], "view">;

  getAddressValuesAt: TypedContractMethod<
    [setKey: BytesLike, start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;

  getBool: TypedContractMethod<[key: BytesLike], [boolean], "view">;

  getBytes32: TypedContractMethod<[key: BytesLike], [string], "view">;

  getBytes32Count: TypedContractMethod<[setKey: BytesLike], [bigint], "view">;

  getBytes32ValuesAt: TypedContractMethod<
    [setKey: BytesLike, start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;

  getUint: TypedContractMethod<[key: BytesLike], [bigint], "view">;

  incrementUint: TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "removeAddress(bytes32,address)": TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [void],
    "nonpayable"
  >;

  "removeAddress(bytes32)": TypedContractMethod<
    [key: BytesLike],
    [void],
    "nonpayable"
  >;

  removeBool: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  "removeBytes32(bytes32,bytes32)": TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;

  "removeBytes32(bytes32)": TypedContractMethod<
    [key: BytesLike],
    [void],
    "nonpayable"
  >;

  removeUint: TypedContractMethod<[key: BytesLike], [void], "nonpayable">;

  setAddress: TypedContractMethod<
    [key: BytesLike, value: AddressLike],
    [string],
    "nonpayable"
  >;

  setBool: TypedContractMethod<
    [key: BytesLike, value: boolean],
    [boolean],
    "nonpayable"
  >;

  setBytes32: TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [string],
    "nonpayable"
  >;

  setUint: TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAddress"
  ): TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addBytes32"
  ): TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "containsAddress"
  ): TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "containsBytes32"
  ): TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressCount"
  ): TypedContractMethod<[setKey: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAddressValuesAt"
  ): TypedContractMethod<
    [setKey: BytesLike, start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBool"
  ): TypedContractMethod<[key: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBytes32"
  ): TypedContractMethod<[key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getBytes32Count"
  ): TypedContractMethod<[setKey: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBytes32ValuesAt"
  ): TypedContractMethod<
    [setKey: BytesLike, start: BigNumberish, end: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUint"
  ): TypedContractMethod<[key: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "incrementUint"
  ): TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAddress(bytes32,address)"
  ): TypedContractMethod<
    [setKey: BytesLike, value: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAddress(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeBool"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeBytes32(bytes32,bytes32)"
  ): TypedContractMethod<
    [setKey: BytesLike, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBytes32(bytes32)"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeUint"
  ): TypedContractMethod<[key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [key: BytesLike, value: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBool"
  ): TypedContractMethod<
    [key: BytesLike, value: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBytes32"
  ): TypedContractMethod<
    [key: BytesLike, value: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUint"
  ): TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
