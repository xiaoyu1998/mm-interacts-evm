/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "Bank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bank__factory>;
    getContractFactory(
      name: "IPoolBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolBank__factory>;
    getContractFactory(
      name: "PoolBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolBank__factory>;
    getContractFactory(
      name: "StrictBank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrictBank__factory>;
    getContractFactory(
      name: "Config",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Config__factory>;
    getContractFactory(
      name: "DataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataStore__factory>;
    getContractFactory(
      name: "IDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDataStore__factory>;
    getContractFactory(
      name: "Keys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keys__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "EventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventEmitter__factory>;
    getContractFactory(
      name: "IEventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventEmitter__factory>;
    getContractFactory(
      name: "BorrowHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BorrowHandler__factory>;
    getContractFactory(
      name: "CloseHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloseHandler__factory>;
    getContractFactory(
      name: "DepositHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositHandler__factory>;
    getContractFactory(
      name: "IBorrowHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowHandler__factory>;
    getContractFactory(
      name: "ICloseHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICloseHandler__factory>;
    getContractFactory(
      name: "IDepositHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositHandler__factory>;
    getContractFactory(
      name: "ILiquidationHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidationHandler__factory>;
    getContractFactory(
      name: "ILiquidityHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityHandler__factory>;
    getContractFactory(
      name: "IRepayHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRepayHandler__factory>;
    getContractFactory(
      name: "ISwapHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapHandler__factory>;
    getContractFactory(
      name: "IWithdrawHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawHandler__factory>;
    getContractFactory(
      name: "LiquidationHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationHandler__factory>;
    getContractFactory(
      name: "LiquidityHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityHandler__factory>;
    getContractFactory(
      name: "RepayHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RepayHandler__factory>;
    getContractFactory(
      name: "SwapHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHandler__factory>;
    getContractFactory(
      name: "WithdrawHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithdrawHandler__factory>;
    getContractFactory(
      name: "FeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeHandler__factory>;
    getContractFactory(
      name: "IPoolInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolInterestRateStrategy__factory>;
    getContractFactory(
      name: "PoolInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolInterestRateStrategy__factory>;
    getContractFactory(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableToken__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PoolConfigurationUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolConfigurationUtils__factory>;
    getContractFactory(
      name: "PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFactory__factory>;
    getContractFactory(
      name: "PoolStoreUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolStoreUtils__factory>;
    getContractFactory(
      name: "PoolUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolUtils__factory>;
    getContractFactory(
      name: "Position",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Position__factory>;
    getContractFactory(
      name: "PositionStoreUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionStoreUtils__factory>;
    getContractFactory(
      name: "Reader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reader__factory>;
    getContractFactory(
      name: "ReaderPoolUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReaderPoolUtils__factory>;
    getContractFactory(
      name: "RepayUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RepayUtils__factory>;
    getContractFactory(
      name: "Role",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Role__factory>;
    getContractFactory(
      name: "RoleModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleModule__factory>;
    getContractFactory(
      name: "RoleStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleStore__factory>;
    getContractFactory(
      name: "BaseRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRouter__factory>;
    getContractFactory(
      name: "ExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeRouter__factory>;
    getContractFactory(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeRouter__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "IPoolERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolERC20__factory>;
    getContractFactory(
      name: "IWNT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWNT__factory>;
    getContractFactory(
      name: "PoolERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolERC20__factory>;
    getContractFactory(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenUtils__factory>;
    getContractFactory(
      name: "BasicMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicMulticall__factory>;
    getContractFactory(
      name: "GlobalReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalReentrancyGuard__factory>;
    getContractFactory(
      name: "PayableMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PayableMulticall__factory>;
    getContractFactory(
      name: "Printer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Printer__factory>;

    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "Bank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Bank>;
    getContractAt(
      name: "IPoolBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolBank>;
    getContractAt(
      name: "PoolBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolBank>;
    getContractAt(
      name: "StrictBank",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrictBank>;
    getContractAt(
      name: "Config",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Config>;
    getContractAt(
      name: "DataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataStore>;
    getContractAt(
      name: "IDataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDataStore>;
    getContractAt(
      name: "Keys",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Keys>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "EventEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EventEmitter>;
    getContractAt(
      name: "IEventEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventEmitter>;
    getContractAt(
      name: "BorrowHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BorrowHandler>;
    getContractAt(
      name: "CloseHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CloseHandler>;
    getContractAt(
      name: "DepositHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositHandler>;
    getContractAt(
      name: "IBorrowHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowHandler>;
    getContractAt(
      name: "ICloseHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICloseHandler>;
    getContractAt(
      name: "IDepositHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositHandler>;
    getContractAt(
      name: "ILiquidationHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidationHandler>;
    getContractAt(
      name: "ILiquidityHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityHandler>;
    getContractAt(
      name: "IRepayHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRepayHandler>;
    getContractAt(
      name: "ISwapHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapHandler>;
    getContractAt(
      name: "IWithdrawHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawHandler>;
    getContractAt(
      name: "LiquidationHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationHandler>;
    getContractAt(
      name: "LiquidityHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityHandler>;
    getContractAt(
      name: "RepayHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RepayHandler>;
    getContractAt(
      name: "SwapHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapHandler>;
    getContractAt(
      name: "WithdrawHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithdrawHandler>;
    getContractAt(
      name: "FeeHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeHandler>;
    getContractAt(
      name: "IPoolInterestRateStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolInterestRateStrategy>;
    getContractAt(
      name: "PoolInterestRateStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolInterestRateStrategy>;
    getContractAt(
      name: "MintableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableToken>;
    getContractAt(
      name: "Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PoolConfigurationUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolConfigurationUtils>;
    getContractAt(
      name: "PoolFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFactory>;
    getContractAt(
      name: "PoolStoreUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolStoreUtils>;
    getContractAt(
      name: "PoolUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolUtils>;
    getContractAt(
      name: "Position",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Position>;
    getContractAt(
      name: "PositionStoreUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionStoreUtils>;
    getContractAt(
      name: "Reader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Reader>;
    getContractAt(
      name: "ReaderPoolUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReaderPoolUtils>;
    getContractAt(
      name: "RepayUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RepayUtils>;
    getContractAt(
      name: "Role",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Role>;
    getContractAt(
      name: "RoleModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleModule>;
    getContractAt(
      name: "RoleStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleStore>;
    getContractAt(
      name: "BaseRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRouter>;
    getContractAt(
      name: "ExchangeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeRouter>;
    getContractAt(
      name: "IExchangeRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeRouter>;
    getContractAt(
      name: "Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "IPoolERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolERC20>;
    getContractAt(
      name: "IWNT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWNT>;
    getContractAt(
      name: "PoolERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolERC20>;
    getContractAt(
      name: "TokenUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenUtils>;
    getContractAt(
      name: "BasicMulticall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicMulticall>;
    getContractAt(
      name: "GlobalReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalReentrancyGuard>;
    getContractAt(
      name: "PayableMulticall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PayableMulticall>;
    getContractAt(
      name: "Printer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Printer>;

    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Bank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bank>;
    deployContract(
      name: "IPoolBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolBank>;
    deployContract(
      name: "PoolBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolBank>;
    deployContract(
      name: "StrictBank",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrictBank>;
    deployContract(
      name: "Config",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Config>;
    deployContract(
      name: "DataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataStore>;
    deployContract(
      name: "IDataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDataStore>;
    deployContract(
      name: "Keys",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Keys>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "EventEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventEmitter>;
    deployContract(
      name: "IEventEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEventEmitter>;
    deployContract(
      name: "BorrowHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BorrowHandler>;
    deployContract(
      name: "CloseHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloseHandler>;
    deployContract(
      name: "DepositHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositHandler>;
    deployContract(
      name: "IBorrowHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBorrowHandler>;
    deployContract(
      name: "ICloseHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICloseHandler>;
    deployContract(
      name: "IDepositHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositHandler>;
    deployContract(
      name: "ILiquidationHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidationHandler>;
    deployContract(
      name: "ILiquidityHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidityHandler>;
    deployContract(
      name: "IRepayHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRepayHandler>;
    deployContract(
      name: "ISwapHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: "IWithdrawHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawHandler>;
    deployContract(
      name: "LiquidationHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationHandler>;
    deployContract(
      name: "LiquidityHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityHandler>;
    deployContract(
      name: "RepayHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RepayHandler>;
    deployContract(
      name: "SwapHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapHandler>;
    deployContract(
      name: "WithdrawHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawHandler>;
    deployContract(
      name: "FeeHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeHandler>;
    deployContract(
      name: "IPoolInterestRateStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolInterestRateStrategy>;
    deployContract(
      name: "PoolInterestRateStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolInterestRateStrategy>;
    deployContract(
      name: "MintableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableToken>;
    deployContract(
      name: "Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pool>;
    deployContract(
      name: "PoolConfigurationUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolConfigurationUtils>;
    deployContract(
      name: "PoolFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolFactory>;
    deployContract(
      name: "PoolStoreUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolStoreUtils>;
    deployContract(
      name: "PoolUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolUtils>;
    deployContract(
      name: "Position",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Position>;
    deployContract(
      name: "PositionStoreUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionStoreUtils>;
    deployContract(
      name: "Reader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reader>;
    deployContract(
      name: "ReaderPoolUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReaderPoolUtils>;
    deployContract(
      name: "RepayUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RepayUtils>;
    deployContract(
      name: "Role",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Role>;
    deployContract(
      name: "RoleModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleModule>;
    deployContract(
      name: "RoleStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleStore>;
    deployContract(
      name: "BaseRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRouter>;
    deployContract(
      name: "ExchangeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExchangeRouter>;
    deployContract(
      name: "IExchangeRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "IPoolERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolERC20>;
    deployContract(
      name: "IWNT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNT>;
    deployContract(
      name: "PoolERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolERC20>;
    deployContract(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "BasicMulticall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicMulticall>;
    deployContract(
      name: "GlobalReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GlobalReentrancyGuard>;
    deployContract(
      name: "PayableMulticall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PayableMulticall>;
    deployContract(
      name: "Printer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Printer>;

    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Bank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bank>;
    deployContract(
      name: "IPoolBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolBank>;
    deployContract(
      name: "PoolBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolBank>;
    deployContract(
      name: "StrictBank",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrictBank>;
    deployContract(
      name: "Config",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Config>;
    deployContract(
      name: "DataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataStore>;
    deployContract(
      name: "IDataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDataStore>;
    deployContract(
      name: "Keys",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Keys>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "EventEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EventEmitter>;
    deployContract(
      name: "IEventEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEventEmitter>;
    deployContract(
      name: "BorrowHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BorrowHandler>;
    deployContract(
      name: "CloseHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloseHandler>;
    deployContract(
      name: "DepositHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositHandler>;
    deployContract(
      name: "IBorrowHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBorrowHandler>;
    deployContract(
      name: "ICloseHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICloseHandler>;
    deployContract(
      name: "IDepositHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositHandler>;
    deployContract(
      name: "ILiquidationHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidationHandler>;
    deployContract(
      name: "ILiquidityHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidityHandler>;
    deployContract(
      name: "IRepayHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRepayHandler>;
    deployContract(
      name: "ISwapHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapHandler>;
    deployContract(
      name: "IWithdrawHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawHandler>;
    deployContract(
      name: "LiquidationHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationHandler>;
    deployContract(
      name: "LiquidityHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityHandler>;
    deployContract(
      name: "RepayHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RepayHandler>;
    deployContract(
      name: "SwapHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapHandler>;
    deployContract(
      name: "WithdrawHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithdrawHandler>;
    deployContract(
      name: "FeeHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeHandler>;
    deployContract(
      name: "IPoolInterestRateStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolInterestRateStrategy>;
    deployContract(
      name: "PoolInterestRateStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolInterestRateStrategy>;
    deployContract(
      name: "MintableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintableToken>;
    deployContract(
      name: "Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pool>;
    deployContract(
      name: "PoolConfigurationUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolConfigurationUtils>;
    deployContract(
      name: "PoolFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolFactory>;
    deployContract(
      name: "PoolStoreUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolStoreUtils>;
    deployContract(
      name: "PoolUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolUtils>;
    deployContract(
      name: "Position",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Position>;
    deployContract(
      name: "PositionStoreUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionStoreUtils>;
    deployContract(
      name: "Reader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reader>;
    deployContract(
      name: "ReaderPoolUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReaderPoolUtils>;
    deployContract(
      name: "RepayUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RepayUtils>;
    deployContract(
      name: "Role",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Role>;
    deployContract(
      name: "RoleModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleModule>;
    deployContract(
      name: "RoleStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleStore>;
    deployContract(
      name: "BaseRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRouter>;
    deployContract(
      name: "ExchangeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExchangeRouter>;
    deployContract(
      name: "IExchangeRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExchangeRouter>;
    deployContract(
      name: "Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "IPoolERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolERC20>;
    deployContract(
      name: "IWNT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNT>;
    deployContract(
      name: "PoolERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolERC20>;
    deployContract(
      name: "TokenUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "BasicMulticall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicMulticall>;
    deployContract(
      name: "GlobalReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GlobalReentrancyGuard>;
    deployContract(
      name: "PayableMulticall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PayableMulticall>;
    deployContract(
      name: "Printer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Printer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
